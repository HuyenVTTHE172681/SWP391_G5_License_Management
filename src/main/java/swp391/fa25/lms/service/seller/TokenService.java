package swp391.fa25.lms.service.seller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import swp391.fa25.lms.model.*;
import swp391.fa25.lms.repository.LicenseAccountRepository;
import swp391.fa25.lms.repository.LicenseToolRepository;
import swp391.fa25.lms.repository.ToolRepository;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Service
@Transactional
public class TokenService {

    @Autowired private LicenseAccountRepository licenseAccountRepository;
    @Autowired private ToolRepository toolRepository;
    @Autowired private LicenseToolRepository licenseRepository;

    // ==========================================================
    // üîπ L·∫§Y DANH S√ÅCH TOKEN
    // ==========================================================

    /** ‚úÖ L·∫•y to√†n b·ªô token (LicenseAccount) c·ªßa m·ªôt tool */
    public List<LicenseAccount> getTokensByTool(Long toolId) {
        return licenseAccountRepository.findByTool_ToolIdAndLoginMethod(
                toolId, LicenseAccount.LoginMethod.TOKEN
        );
    }

    // ==========================================================
    // üîπ TH√äM TOKEN CHO TOOL ƒê√É C√ì
    // ==========================================================

    /**
     * ‚úÖ Th√™m nhi·ªÅu token cho Tool ƒë√£ t·ªìn t·∫°i trong DB
     * - Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu (seller)
     * - Validate format, ch·ªëng tr√πng, kh√¥ng v∆∞·ª£t qu√° quantity
     */
    public void addTokensToTool(Long toolId, List<String> tokens, Account seller) {
        Tool tool = toolRepository.findById(toolId)
                .orElseThrow(() -> new IllegalArgumentException("Tool not found."));

        if (!tool.getSeller().getAccountId().equals(seller.getAccountId())) {
            throw new IllegalArgumentException("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a tool n√†y.");
        }

        if (tokens == null || tokens.isEmpty()) {
            throw new IllegalArgumentException("Danh s√°ch token tr·ªëng.");
        }

        // S·ªë token c√≤n tr·ªëng c√≥ th·ªÉ th√™m
        List<LicenseAccount> existing = licenseAccountRepository
                .findByTool_ToolIdAndLoginMethod(toolId, LicenseAccount.LoginMethod.TOKEN);

        int current = existing.size();
        int quantity = tool.getQuantity() != null ? tool.getQuantity() : 0;
        int remaining = quantity - current;

        if (remaining <= 0) {
            throw new IllegalArgumentException("ƒê√£ ƒë·ªß s·ªë l∆∞·ª£ng token (" + quantity + ").");
        }
        if (tokens.size() > remaining) {
            throw new IllegalArgumentException("Ch·ªâ c√≥ th·ªÉ th√™m t·ªëi ƒëa " + remaining + " token n·ªØa.");
        }

        // Validate & th√™m
        for (String token : tokens) {
            if (token == null || !token.matches("^\\d{6}$")) {
                throw new IllegalArgumentException("Token kh√¥ng h·ª£p l·ªá: '" + token + "' (ph·∫£i 6 ch·ªØ s·ªë)");
            }
            if (licenseAccountRepository.existsByToolAndToken(tool, token)) {
                throw new IllegalArgumentException("Token '" + token + "' ƒë√£ t·ªìn t·∫°i trong tool n√†y.");
            }

            LicenseAccount acc = new LicenseAccount();
            acc.setTool(tool);
            acc.setLoginMethod(LicenseAccount.LoginMethod.TOKEN);
            acc.setToken(token);
            acc.setStatus(LicenseAccount.Status.ACTIVE);
            acc.setCreatedAt(LocalDateTime.now());
            licenseAccountRepository.save(acc);
        }
    }

    // ==========================================================
    // üîπ XO√Å TOKEN
    // ==========================================================

    /** ‚úÖ Xo√° m·ªôt token (ch·ªâ khi ch∆∞a d√πng / c√≤n active) */
    public void deleteToken(Long tokenId) {
        if (!licenseAccountRepository.existsById(tokenId)) {
            throw new IllegalArgumentException("Token kh√¥ng t·ªìn t·∫°i.");
        }
        licenseAccountRepository.deleteById(tokenId);
    }

    // ==========================================================
    // üîπ FINALIZE TOOL T·ª™ PHI√äN (FLOW 2 B∆Ø·ªöC)
    // ==========================================================

    /**
     * ‚úÖ Finalize Tool (khi seller ƒë√£ nh·∫≠p token sau khi t·∫°o tool t·∫°m)
     * - T·∫°o Tool, Licenses, v√† Tokens c√πng l√∫c
     */
    public Tool finalizeTool(Account seller,
                             Tool tempTool,
                             List<String> tokens,
                             List<Integer> licenseDays,
                             List<Double> licensePrices) {

        if (tempTool == null)
            throw new IllegalArgumentException("Phi√™n tool t·∫°m kh√¥ng t·ªìn t·∫°i.");

        if (tokens == null || tokens.isEmpty())
            throw new IllegalArgumentException("Vui l√≤ng nh·∫≠p danh s√°ch token.");

        if (licenseDays == null || licensePrices == null ||
                licenseDays.isEmpty() || licensePrices.isEmpty()) {
            throw new IllegalArgumentException("Thi·∫øu th√¥ng tin license.");
        }

        if (licenseDays.size() != licensePrices.size()) {
            throw new IllegalArgumentException("Danh s√°ch ng√†y v√† gi√° kh√¥ng kh·ªõp nhau.");
        }

        if (tempTool.getQuantity() == null)
            throw new IllegalArgumentException("S·ªë l∆∞·ª£ng tool kh√¥ng h·ª£p l·ªá.");

        int expected = tempTool.getQuantity();
        int actual = tokens.size();

        if (actual < expected) {
            throw new IllegalArgumentException("Thi·∫øu token. C·∫ßn th√™m " + (expected - actual) + " token.");
        }
        if (actual > expected) {
            throw new IllegalArgumentException("Th·ª´a token. C·∫ßn xo√° b·ªõt " + (actual - expected) + " token.");
        }

        // C·∫≠p nh·∫≠t metadata
        tempTool.setSeller(seller);
        tempTool.setStatus(Tool.Status.PENDING);
        tempTool.setCreatedAt(LocalDateTime.now());
        tempTool.setUpdatedAt(LocalDateTime.now());

        // ‚úÖ L∆∞u Tool
        Tool saved = toolRepository.save(tempTool);

        // ‚úÖ L∆∞u Licenses
        List<License> licenseEntities = new ArrayList<>();
        for (int i = 0; i < licenseDays.size(); i++) {
            License l = new License();
            l.setTool(saved);
            l.setDurationDays(licenseDays.get(i));
            l.setPrice(licensePrices.get(i));
            l.setCreatedAt(LocalDateTime.now());
            licenseEntities.add(l);
        }
        licenseRepository.saveAll(licenseEntities);

        // ‚úÖ L∆∞u Tokens
        for (String token : tokens) {
            if (!token.matches("^\\d{6}$")) {
                throw new IllegalArgumentException("Token kh√¥ng h·ª£p l·ªá: '" + token + "' (ph·∫£i 6 ch·ªØ s·ªë)");
            }
            LicenseAccount acc = new LicenseAccount();
            acc.setTool(saved);
            acc.setLoginMethod(LicenseAccount.LoginMethod.TOKEN);
            acc.setToken(token);
            acc.setStatus(LicenseAccount.Status.ACTIVE);
            acc.setCreatedAt(LocalDateTime.now());
            licenseAccountRepository.save(acc);
        }

        return saved;
    }

    // ==========================================================
    // üîπ C·∫¨P NH·∫¨T TOKEN KHI EDIT TOOL (FLOW TOKEN-EDIT)
    // ==========================================================

    /** ‚úÖ Xo√° to√†n b·ªô token c≈© v√† ghi l·∫°i token m·ªõi (finalize edit) */
    @Transactional
    public void updateTokensForTool(Tool tool, List<String> tokens) {
        licenseAccountRepository.deleteByTool(tool);

        for (String token : tokens) {
            if (token == null || !token.matches("^\\d{6}$")) {
                throw new IllegalArgumentException("Token kh√¥ng h·ª£p l·ªá: '" + token + "' (ph·∫£i 6 ch·ªØ s·ªë)");
            }

            LicenseAccount acc = new LicenseAccount();
            acc.setTool(tool);
            acc.setLoginMethod(LicenseAccount.LoginMethod.TOKEN);
            acc.setToken(token);
            acc.setStatus(LicenseAccount.Status.ACTIVE);
            acc.setCreatedAt(LocalDateTime.now());
            licenseAccountRepository.save(acc);
        }
    }
}
