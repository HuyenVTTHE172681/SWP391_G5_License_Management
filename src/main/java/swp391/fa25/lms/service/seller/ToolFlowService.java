package swp391.fa25.lms.service.seller;

import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import swp391.fa25.lms.model.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class ToolFlowService {

    @Autowired private ToolService toolService;
    @Autowired private FileStorageService fileStorageService;

    // ‚úÖ key l∆∞u session t·∫°m th·ªùi cho tool ch∆∞a ho√†n th√†nh
    private static final String SESSION_PENDING_TOOL = "pendingTool";

    /**
     * ‚úÖ B·∫Øt ƒë·∫ßu t·∫°o tool m·ªõi
     * 1Ô∏è‚É£ Validate logic nghi·ªáp v·ª•
     * 2Ô∏è‚É£ Upload file (·∫£nh + tool)
     * 3Ô∏è‚É£ L∆∞u Tool tr·∫°ng th√°i PENDING
     * 4Ô∏è‚É£ N·∫øu ch·ªçn loginMethod = TOKEN ‚Üí l∆∞u t·∫°m Tool trong session v√† ch·ªù token
     * 5Ô∏è‚É£ N·∫øu ch·ªçn USER_PASSWORD ‚Üí l∆∞u lu√¥n DB
     */
    public void startCreateTool(Tool tool,
                                MultipartFile imageFile,
                                MultipartFile toolFile,
                                Long categoryId,
                                List<Integer> licenseDays,
                                List<Double> licensePrices,
                                HttpSession session) throws IOException {

        // üîπ L·∫•y seller t·ª´ session
        Account seller = (Account) session.getAttribute("loggedInAccount");
        if (seller == null) {
            throw new IllegalStateException("You must be logged in as a seller to add a tool.");
        }

        // üîπ Validate tr√πng t√™n
        if (toolService.existsByToolName(tool.getToolName())) {
            throw new IllegalArgumentException("Tool name already exists!");
        }

        // üîπ L·∫•y category
        Category category = toolService.getCategoryById(categoryId);
        if (category == null) {
            throw new IllegalArgumentException("Category not found");
        }

        // üîπ Upload file ·∫£nh + tool
        String imagePath = fileStorageService.uploadImage(imageFile);
        String toolPath = fileStorageService.uploadToolFile(toolFile);

        tool.setImage(imagePath);
        tool.setCategory(category);
        tool.setSeller(seller); // ‚úÖ G·∫ÆN SELLER ·ªû ƒê√ÇY
        tool.setStatus(Tool.Status.PENDING); // (khuy·∫øn ngh·ªã) ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† Pending khi m·ªõi t·∫°o

        // üîπ T·∫°o danh s√°ch license
        List<License> licenses = new ArrayList<>();
        for (int i = 0; i < licenseDays.size(); i++) {
            License license = new License();
            license.setDurationDays(licenseDays.get(i));
            license.setPrice(licensePrices.get(i));
            license.setName("License " + licenseDays.get(i) + " days"); // ‚úÖ tr√°nh l·ªói validation
            licenses.add(license);
        }

        // üîπ N·∫øu l√† TOKEN ‚Üí l∆∞u t·∫°m Tool & License v√†o session ƒë·ªÉ x·ª≠ l√Ω sau
        if (tool.getLoginMethod() == Tool.LoginMethod.TOKEN) {
            ToolSessionData pending = new ToolSessionData(tool, category, licenses, toolPath);
            session.setAttribute(SESSION_PENDING_TOOL, pending);
            return;
        }

        // üîπ N·∫øu l√† USER_PASSWORD ‚Üí l∆∞u lu√¥n v√†o DB
        Tool saved = toolService.createTool(tool, category);
        toolService.createLicensesForTool(saved, licenses);

        // (N·∫øu b·∫°n c√≥ entity ToolFile ri√™ng th√¨ t·∫°o ·ªü ƒë√¢y)
    }

    /**
     * ‚úÖ Sau khi user nh·∫≠p token ·ªü token-manage
     * - L·∫•y ToolSessionData t·ª´ session
     * - So s√°nh quantity v√† s·ªë l∆∞·ª£ng token
     * - N·∫øu kh·ªõp ‚Üí l∆∞u Tool + Token v√†o DB
     */
    public void finalizeTokenTool(List<String> tokens, HttpSession session) throws IOException {
        ToolSessionData pending = (ToolSessionData) session.getAttribute(SESSION_PENDING_TOOL);
        if (pending == null) {
            throw new IllegalStateException("No pending tool found in session.");
        }

        Tool tool = pending.getTool();
        Category category = pending.getCategory();
        List<License> licenses = pending.getLicenses();

        int expected = tool.getQuantity();
        int actual = tokens.size();

        if (actual < expected) {
            throw new IllegalArgumentException("Not enough tokens. Need " + (expected - actual) + " more.");
        } else if (actual > expected) {
            throw new IllegalArgumentException("Too many tokens. Remove " + (actual - expected) + " extra tokens.");
        }

        // ‚úÖ L∆∞u tool v√†o DB
        Tool saved = toolService.createTool(tool, category);

        // ‚úÖ L∆∞u license
        toolService.createLicensesForTool(saved, licenses);

        // ‚úÖ L∆∞u token
        toolService.createLicenseAccountsForTool(saved, tokens);

        // ‚úÖ Clear session
        session.removeAttribute(SESSION_PENDING_TOOL);
    }

    /**
     * ‚úÖ Khi ng∆∞·ªùi d√πng b·∫•m ‚ÄúBack‚Äù ·ªü token-manage ‚Üí h·ªßy lu·ªìng t·∫°m v√† quay l·∫°i tool-add
     */
    public void cancelToolCreation(HttpSession session) {
        // X√≥a tool t·∫°m ƒëang l∆∞u trong session
        session.removeAttribute(SESSION_PENDING_TOOL);
    }
    /**
     * ‚úÖ D√πng ƒë·ªÉ xem tool t·∫°m th·ªùi trong session (debug)
     */
    public ToolSessionData getPendingTool(HttpSession session) {
        return (ToolSessionData) session.getAttribute(SESSION_PENDING_TOOL);
    }

    /**
     * ‚úÖ L·ªõp t·∫°m l∆∞u d·ªØ li·ªáu tool khi ƒëang ch·ªù token
     */
    public static class ToolSessionData {
        private final Tool tool;
        private final Category category;
        private final List<License> licenses;
        private final String toolPath;

        public ToolSessionData(Tool tool, Category category, List<License> licenses, String toolPath) {
            this.tool = tool;
            this.category = category;
            this.licenses = licenses;
            this.toolPath = toolPath;
        }

        public Tool getTool() { return tool; }
        public Category getCategory() { return category; }
        public List<License> getLicenses() { return licenses; }
        public String getToolPath() { return toolPath; }
    }
}
