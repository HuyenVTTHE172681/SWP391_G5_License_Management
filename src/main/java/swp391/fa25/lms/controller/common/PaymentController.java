package swp391.fa25.lms.controller.common;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;
import swp391.fa25.lms.model.Account;
import swp391.fa25.lms.model.CustomerOrder;
import swp391.fa25.lms.model.Tool;
import swp391.fa25.lms.repository.OrderRepository;
import swp391.fa25.lms.service.customer.PaymentService;
import swp391.fa25.lms.service.customer.ToolService;

import java.util.Map;
import java.util.Optional;

@Controller
@RequestMapping("/payment")
public class PaymentController {
    @Autowired
    private PaymentService paymentService;
    @Autowired
    private ToolService toolService;
    @Autowired
    private OrderRepository orderRepository;

    /**
     * T·∫°o thanh to√°n ‚Äî khi click ‚ÄúThanh to√°n‚Äù payment/create
     */
    @GetMapping("/create")
    public RedirectView createPayment(@RequestParam Long toolId,
                                      @RequestParam Long licenseId,
                                      @RequestParam(required = false) Long orderId,  // TH√äM: Cho retry
                                      HttpServletRequest request,
                                      Model model) {
        // Ki·ªÉm tra session (n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ b·∫Øt ƒëƒÉng nh·∫≠p l·∫°i)
        HttpSession session = request.getSession(false);
        if (session == null) {
            return new RedirectView("/login");
        }

        Tool tool = toolService.findById(toolId)
                .orElseThrow(() -> new RuntimeException("Tool kh√¥ng t·ªìn t·∫°i"));

        if (tool.getQuantity() <= 0) {
            model.addAttribute("errorMessage", "S·∫£n ph·∫©m n√†y ƒë√£ h·∫øt h√†ng!");
            return new RedirectView("/tools/" + toolId);  // Redirect back v·ªõi error
        }

        // L·∫•y th√¥ng tin account ƒëƒÉng nh·∫≠p t·ª´ session
        Account account = (Account) session.getAttribute("loggedInAccount");
        if (account == null) {
            // Not logged in according to session ‚Üí redirect login
            return new RedirectView("/login");
        }

        // TH√äM M·ªöI: N·∫øu c√≥ orderId (retry), check PENDING
        if (orderId != null) {
            Optional<CustomerOrder> optionalOrder = orderRepository.findById(orderId);  // Inject OrderRepo n·∫øu ch∆∞a
            if (optionalOrder.isPresent() && optionalOrder.get().getOrderStatus() == CustomerOrder.OrderStatus.PENDING) {
                // Reuse order PENDING
                String paymentUrl = paymentService.createPaymentUrlForRetry(orderId, licenseId, account, request);
                return new RedirectView(paymentUrl);
            } else {
                model.addAttribute("errorMessage", "ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ thanh to√°n!");
                return new RedirectView("/orders");  // Back to orders
            }
        }

        // G·ªçi service ƒë·ªÉ t·∫°o URL thanh to√°n VNPay (t·∫°o order m·ªõi PENDING)
        String paymentUrl = paymentService.createPaymentUrl(toolId, licenseId, account, request);

        // Redirect client to VNPay (sandbox)
        return new RedirectView(paymentUrl);
    }

    /**
     * Callback sau khi thanh to√°n xong ‚Äî VNPay s·∫Ω redirect payment/vnpay-return
     */
    @GetMapping("/vnpay-return")
    public String paymentReturn(@RequestParam Map<String, String> params,
                                Map<String, Object> model) {
        // G·ªçi service x·ª≠ l√Ω callback t·ª´ VNPay
        boolean success = paymentService.handlePaymentCallback(params);
        String orderInfo = params.get("vnp_OrderInfo");

        // ‚ö° Ph√¢n bi·ªát lo·∫°i giao d·ªãch
        if (orderInfo != null && orderInfo.startsWith("SELLER_")) {
            if (success) {
                return "seller/paymentSuccess";
            } else {
                return "seller/paymentFailed";
            }
        }

        // üßæ Thanh to√°n tool
        // K·∫øt qu·∫£ ra view
        model.put("success", success);
        model.put("vnpParams", params);

        return "public/payment-result"; // Tr·∫£ v·ªÅ k·∫øt qu·∫£ thanh to√°n
    }
}
